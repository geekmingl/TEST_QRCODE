
// TEST_QRDlg.cpp : 实现文件
//

#include "stdafx.h"
#include "TEST_QR.h"
#include "TEST_QRDlg.h"
#include "afxdialogex.h"



#ifdef _DEBUG
#define new DEBUG_NEW
#endif

/* add by mingl */
using namespace std;

#include "QrCode.hpp"
using namespace qrcodegen;

#include "svgpp/svgpp.hpp"
using namespace svgpp;

/* end by mingl */


// CTEST_QRDlg 对话框



CTEST_QRDlg::CTEST_QRDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(IDD_TEST_QR_DIALOG, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CTEST_QRDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CTEST_QRDlg, CDialogEx)
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_BUTTON_TEST, &CTEST_QRDlg::OnBnClickedButtonTest)
END_MESSAGE_MAP()


// CTEST_QRDlg 消息处理程序

BOOL CTEST_QRDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO: 在此添加额外的初始化代码

	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CTEST_QRDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CTEST_QRDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}



void CTEST_QRDlg::OnBnClickedButtonTest()
{
	// TODO: 在此添加控件通知处理程序代码

	// Simple operation
	QrCode qr0 = QrCode::encodeText("Hello, world!", QrCode::Ecc::MEDIUM);
	std::string svg = qr0.toSvgString(4);

	// Manual operation
	std::vector<QrSegment> segs =
		QrSegment::makeSegments("3141592653589793238462643383");
	QrCode qr1 = QrCode::encodeSegments(segs, QrCode::Ecc::HIGH, 5, 5, 2, false);


}
